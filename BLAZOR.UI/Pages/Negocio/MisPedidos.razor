@page "/MisPedidos"

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inject AuthenticationStateProvider AuthState
@inject NavigationManager UriHelper
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor


<div class="container">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="path/to/file/bootstrap.min.css">
    <p><h3>Pedidos <span class="h5"><i class="fas fa-archive"></i></span></h3></p>
    <hr />

    <table class="table table-bordered table-striped">

        <thead class="thead-dark">
            <tr>
                <th scope="col">N° Pedido</th>
                <th scope="col">Fecha pedido</th>
                <th scope="col">Estado</th>
                <th scope="col"><a href="">Detalle</a></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var oElement in listabitacoras)
            {
                <tr>
                    <td>@oElement.fecha</td>
                    <td>@oElement.mensaje</td>
                    <td>@oElement.severidad</td>
                    <th scope="col"><a href="">Ver detalle...</a></th>                    
                </tr>
            }
        </tbody>
    </table>
</div>


@code { private string Username = "Anonymous User";
    private string Picture = "";

    string URLBitacora = "https://localhost:44303/api/Bitacora";

    public List<SERVICIOS.BITACORA.DOMINIO.Bitacora> listabitacoras = new List<SERVICIOS.BITACORA.DOMINIO.Bitacora>();

    protected override async Task OnInitializedAsync()

    {

        var state = await AuthState.GetAuthenticationStateAsync();

        Username = state.User.Claims
                    .Where(c => c.Type.Equals("name"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;

        Picture = state.User.Claims
                    .Where(c => c.Type.Equals("picture"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;

        await base.OnInitializedAsync();
    }

}